// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Maths;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Collections;
using MicrosoftResearch.Infer.Factors;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.6.41114.1 at 10:28 on 26 maja 2015.
	/// </remarks>
	public partial class Model191_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the vVector__192 property</summary>
		private Vector[] VVector__192;
		/// <summary>Field backing the vdouble__576 property</summary>
		private double[] Vdouble__576;
		/// <summary>The number of iterations last computed by Changed_vVector__192_vdouble__576. Set this to zero to force re-execution of Changed_vVector__192_vdouble__576</summary>
		public int Changed_vVector__192_vdouble__576_iterationsDone;
		public PointMass<Vector[]> vVector__192_marginal;
		public DistributionStructArray<Gaussian,double> vdouble__576_marginal;
		/// <summary>Message to marginal of 'vVector577'</summary>
		public VectorGaussian vVector577_marginal_F;
		/// <summary>Message to marginal of 'vdouble__577'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__577_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vVector__192'</summary>
		public Vector[] vVector__192
		{
			get {
				return this.VVector__192;
			}
			set {
				if ((value!=null)&&(value.Length!=5622)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+5622)+" was expected for variable \'vVector__192\'");
				}
				this.VVector__192 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vVector__192_vdouble__576_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__576'</summary>
		public double[] vdouble__576
		{
			get {
				return this.Vdouble__576;
			}
			set {
				if ((value!=null)&&(value.Length!=5622)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+5622)+" was expected for variable \'vdouble__576\'");
				}
				this.Vdouble__576 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vVector__192_vdouble__576_iterationsDone = 0;
			}
		}

		#endregion

		#region Methods
		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vVector__192") {
				return this.vVector__192;
			}
			if (variableName=="vdouble__576") {
				return this.vdouble__576;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vVector__192") {
				this.vVector__192 = (Vector[])value;
				return ;
			}
			if (variableName=="vdouble__576") {
				this.vdouble__576 = (double[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vVector__192") {
				return this.VVector__192Marginal();
			}
			if (variableName=="vdouble__576") {
				return this.Vdouble__576Marginal();
			}
			if (variableName=="vVector577") {
				return this.VVector577Marginal();
			}
			if (variableName=="vdouble__577") {
				return this.Vdouble__577Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Changed_vVector__192_vdouble__576();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(this.numberOfIterationsDone+additionalIterations, false);
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Computations that depend on the observed value of vVector__192 and vdouble__576</summary>
		private void Changed_vVector__192_vdouble__576()
		{
			if (this.Changed_vVector__192_vdouble__576_iterationsDone==1) {
				return ;
			}
			this.vVector__192_marginal = new PointMass<Vector[]>(this.VVector__192);
			this.vdouble__576_marginal = new DistributionStructArray<Gaussian,double>(5622, delegate(int index192) {
				return Gaussian.Uniform();
			});
			this.vdouble__576_marginal = Distribution.SetPoint<DistributionStructArray<Gaussian,double>,double[]>(this.vdouble__576_marginal, this.Vdouble__576);
			// The constant 'vVectorGaussian192'
			VectorGaussian vVectorGaussian192 = VectorGaussian.FromNatural(DenseVector.FromArray(new double[3] {0.0, 0.0, 0.0}), new PositiveDefiniteMatrix(new double[3, 3] {{1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}}));
			this.vVector577_marginal_F = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian192);
			// Message from use of 'vdouble__577'
			DistributionStructArray<Gaussian,double> vdouble__577_use_B = default(DistributionStructArray<Gaussian,double>);
			// Create array for 'vdouble__577_use' Backwards messages.
			vdouble__577_use_B = new DistributionStructArray<Gaussian,double>(5622);
			for(int index192 = 0; index192<5622; index192++) {
				vdouble__577_use_B[index192] = Gaussian.Uniform();
				// Message to 'vdouble__577_use' from GaussianFromMeanAndVariance factor
				vdouble__577_use_B[index192] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.Vdouble__576[index192], 0.1);
			}
			DistributionRefArray<VectorGaussian,Vector> vVector577_rep_B = default(DistributionRefArray<VectorGaussian,Vector>);
			// Create array for 'vVector577_rep' Backwards messages.
			vVector577_rep_B = new DistributionRefArray<VectorGaussian,Vector>(5622);
			for(int index192 = 0; index192<5622; index192++) {
				vVector577_rep_B[index192] = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian192);
				// Message to 'vVector577_rep' from InnerProduct factor
				vVector577_rep_B[index192] = InnerProductOp.AAverageConditional(vdouble__577_use_B[index192], this.VVector__192[index192], vVector577_rep_B[index192]);
			}
			// Buffer for ReplicateOp_Divide.Marginal<VectorGaussian>
			VectorGaussian vVector577_rep_B_toDef = default(VectorGaussian);
			// Message to 'vVector577_rep' from Replicate factor
			vVector577_rep_B_toDef = ReplicateOp_Divide.ToDefInit<VectorGaussian>(vVectorGaussian192);
			// Message to 'vVector577_rep' from Replicate factor
			vVector577_rep_B_toDef = ReplicateOp_Divide.ToDef<VectorGaussian>(vVector577_rep_B, vVector577_rep_B_toDef);
			// Message to 'vVector577_marginal' from Variable factor
			this.vVector577_marginal_F = VariableOp.MarginalAverageConditional<VectorGaussian>(vVector577_rep_B_toDef, vVectorGaussian192, this.vVector577_marginal_F);
			DistributionStructArray<Gaussian,double> vdouble__577_F = default(DistributionStructArray<Gaussian,double>);
			// Create array for 'vdouble__577' Forwards messages.
			vdouble__577_F = new DistributionStructArray<Gaussian,double>(5622);
			for(int index192 = 0; index192<5622; index192++) {
				vdouble__577_F[index192] = Gaussian.Uniform();
			}
			DistributionRefArray<VectorGaussian,Vector> vVector577_rep_F = default(DistributionRefArray<VectorGaussian,Vector>);
			// Create array for 'vVector577_rep' Forwards messages.
			vVector577_rep_F = new DistributionRefArray<VectorGaussian,Vector>(5622);
			for(int index192 = 0; index192<5622; index192++) {
				vVector577_rep_F[index192] = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian192);
			}
			// Buffer for ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>
			VectorGaussian vVector577_rep_F_marginal = default(VectorGaussian);
			// Message to 'vVector577_rep' from Replicate factor
			vVector577_rep_F_marginal = ReplicateOp_Divide.MarginalInit<VectorGaussian>(vVectorGaussian192);
			// Message to 'vVector577_rep' from Replicate factor
			vVector577_rep_F_marginal = ReplicateOp_Divide.Marginal<VectorGaussian>(vVector577_rep_B_toDef, vVectorGaussian192, vVector577_rep_F_marginal);
			// Buffer for InnerProductOp.InnerProductAverageConditional
			// Create array for replicates of 'vVector577_rep_F_index192__AMean'
			Vector[] vVector577_rep_F_index192__AMean = new Vector[5622];
			for(int index192 = 0; index192<5622; index192++) {
				// Message to 'vdouble__577' from InnerProduct factor
				vVector577_rep_F_index192__AMean[index192] = InnerProductOp.AMeanInit(vVector577_rep_F[index192]);
			}
			// Buffer for InnerProductOp.AMean
			// Create array for replicates of 'vVector577_rep_F_index192__AVariance'
			PositiveDefiniteMatrix[] vVector577_rep_F_index192__AVariance = new PositiveDefiniteMatrix[5622];
			for(int index192 = 0; index192<5622; index192++) {
				// Message to 'vdouble__577' from InnerProduct factor
				vVector577_rep_F_index192__AVariance[index192] = InnerProductOp.AVarianceInit(vVector577_rep_F[index192]);
				// Message to 'vVector577_rep' from Replicate factor
				vVector577_rep_F[index192] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(vVector577_rep_B[index192], vVector577_rep_F_marginal, index192, vVector577_rep_F[index192]);
			}
			// Create array for 'vdouble__577_marginal' Forwards messages.
			this.vdouble__577_marginal_F = new DistributionStructArray<Gaussian,double>(5622);
			for(int index192 = 0; index192<5622; index192++) {
				this.vdouble__577_marginal_F[index192] = Gaussian.Uniform();
				// Message to 'vdouble__577' from InnerProduct factor
				vVector577_rep_F_index192__AVariance[index192] = InnerProductOp.AVariance(vVector577_rep_F[index192], vVector577_rep_F_index192__AVariance[index192]);
				// Message to 'vdouble__577' from InnerProduct factor
				vVector577_rep_F_index192__AMean[index192] = InnerProductOp.AMean(vVector577_rep_F[index192], vVector577_rep_F_index192__AVariance[index192], vVector577_rep_F_index192__AMean[index192]);
				// Message to 'vdouble__577' from InnerProduct factor
				vdouble__577_F[index192] = InnerProductOp.InnerProductAverageConditional(vVector577_rep_F_index192__AMean[index192], vVector577_rep_F_index192__AVariance[index192], this.VVector__192[index192]);
				// Message to 'vdouble__577_marginal' from DerivedVariable factor
				this.vdouble__577_marginal_F[index192] = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble__577_use_B[index192], vdouble__577_F[index192], this.vdouble__577_marginal_F[index192]);
			}
			this.Changed_vVector__192_vdouble__576_iterationsDone = 1;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vVector__192' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Vector[]> VVector__192Marginal()
		{
			return this.vVector__192_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__576' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__576Marginal()
		{
			return this.vdouble__576_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vVector577' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public VectorGaussian VVector577Marginal()
		{
			return this.vVector577_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__577' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__577Marginal()
		{
			return this.vdouble__577_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
